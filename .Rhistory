night_owlish <- "https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme"
rstudioapi::addTheme(night_owlish, apply = TRUE)
# install.packages("rstudioapi")
rstudioapi::addTheme("http://url-to-the-rstheme/", apply = TRUE)
install.packages("rstudioapi")
rstudioapi::addTheme("http://url-to-the-rstheme/", apply = TRUE)
night_owlish <- "https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme"
rstudioapi::addTheme(night_owlish, apply = TRUE)
#Ejercicio 1
#Ejercicio 1
#Ejercicio 1
#Ejercicio 1
#Ejercicio 1
#Ejercicio 1
#Ejercicio 1
#Ejercicio 1
numero <- 10
#Ejercicio 1
numero <- 10
#Ejercicio 2
class(numero)
#Ejercicio 3
numero = numero + numero * 2
#Ejercicio 2
class(numero)
#Ejercicio 2
class(numero)
#Ejercicio 8
#Ejercicio 1
numero <- 10
nombre <- "Pedro"
#Ejercicio 2
class(numero)
is.numeric(numero)
#Ejercicio 3
numero = numero + numero * 2
#Ejercicio 4
edades = c(30,34,4)
informacion = list(nombre = "Pedro", edad = 30)
#Ejercicio 5
is.character(nombre)
es_numerico = TRUE
is.logical(es_numerico)
#Ejercicio 6
mayor_de_edad <- edades[1] >= 18
#Ejercicio 7
esta_presente <- 30 %in% edades
#Ejercicio 8
#Ejercicio 9
#Ejercicio 6
mayor_de_edad <- edades[1] >= 18
esta_presente <- 30 %in% edades
esta_presente
mayor_de_edad <- edades[1] >= 18
mayor_de_edad
#Ejercicio 8
es_mayor <- 2*numero >= edades[3]
es_mayor
condicion1 & condicion2
#Ejercicio 9
condicion1 <- TRUE
condicion2 <- TRUE
condicion1 & condicion2
no_verdadero  <- !verdadero
no_verdadero  <- !verdadero
#Ejercicio 10
verdadero <- TRUE
no_verdadero  <- !verdadero
no_verdadero
condiciones_verdaderas <- condicion1 & condicion2
condiciones_verdaderas
getwd()
setwd(C:\Users\pedro\Documents\Git\R\R)
setwd("C:\Users\pedro\Documents\Git\R\R")
setwd("C:/Users/pedro/Documents/Git/R/R/")
dir.create(Proyecto01)
directorio_actual <- getwd()
nueva carpeta <- file.path(direc )
nueva carpeta <- file.path(directorio_actual, "Proyecto01" )
nombre_carpeta <- "Proyecto01"
nueva carpeta <- file.path(directorio_actual, nombre_carpeta )
nueva carpeta <- file.pathh(directorio_actual, nombre_carpeta)
nueva carpeta <- file.path(directorio_actual, nombre_carpeta)
salario(40,20)
salario <- function(costehora, retenciones = 0.02, horas = 40){
if (horas > 45){
horasextra = horas - 45
costextra = costehora * 1.5
bruto = (horas-45) * costehora + horasextra * costextra
neto = bruto * (1-retenciones )
}else{
bruto = horas * costehora
neto = bruto * (1-retenciones )
}
return (list("Salario bruto" = bruto, "Salario neto" = neto))
}
salario(40,20)
salario <- function(costehora, horas = 40, retenciones = 0.02){
if (horas > 45){
horasextra = horas - 45
costextra = costehora * 1.5
bruto = (horas-45) * costehora + horasextra * costextra
neto = bruto * (1-retenciones )
}else{
bruto = horas * costehora
neto = bruto * (1-retenciones )
}
return (list("Salario bruto" = bruto, "Salario neto" = neto))
}
salario(40,20)
salario(20,40)
salario(30,40)
salario(30,50,0.2)
salario(20,50,0.2)
salario <- function(costehora, horas = 40, retenciones = 0.02){
if (horas > 45){
horasextra = horas - 45
costextra = costehora * 1.5
bruto = 45 * costehora + horasextra * costextra
neto = bruto * (1-retenciones )
}else{
bruto = horas * costehora
neto = bruto * (1-retenciones )
}
return (list("Salario bruto" = bruto, "Salario neto" = neto))
}
salario(20,50,0.2)
media <- function(vector){
resultado <- 0
for (i in 1:length(vector)) {
resultado <- resultado  <- vector[i]
}
resultado / length(vector)
}
media(1:10)
media <- function(vector){
resultado <- 0
for (i in 1:length(vector)) {
resultado <- resultado  + vector[i]
}
resultado / length(vector)
}
media(1:10)
media(1:11)
mean(1:11)
ia1 <- function(vector){
resultado <- 0
i <- 1
while(i<=length(vector)){
resultado <- resultado  + vector[i]
i <- i+1
}
resultado / length(vector)
}
media1(1:11)
media1 <- function(vector){
resultado <- 0
i <- 1
while(i<=length(vector)){
resultado <- resultado  + vector[i]
i <- i+1
}
resultado / length(vector)
}
media1(1:11)
media2 <-  function(vector){
sum(vector) / length(vector)
}
media2(1:11)
saludo <- function(){
print("Hola, bienvenido a R")
}
saludo()
calificar_edad <- function(edad){
persona = "menor de edad"
if(edad>18){
persona = "mayor de edad"
}
return(persona)
}
if(edad>=18){
persona = "mayor de edad"
}
calificar_edad <- function(edad){
persona = "menor de edad"
if(edad>=18){
persona = "mayor de edad"
}
return(persona)
}
calificar_edad(19)
calificar_edad(1)
calificar_edad(1)
calificar_edad <- function(edad){
if(edad>=18){
print ("mayor de edad")
}else{
print ("menor de edad")
}
}
calificar_edad(1)
calificar_edad(19)
cat(paste(n, "x", i, "=", resultado, "\n"))
tabla_multiplicar <- function(n) {
for (i in 1:10) {
resultado <- n * i
cat(paste(n, "x", i, "=", resultado, "\n"))
}
}
# Llamada a la función
tabla_multiplicar(5)
numeros_pares <- function(limite) {
for (i in 1:limite) {
if (i %% 2 == 0) {
cat(i, " ")
}
}
cat("\n")
}
# Llamada a la función
numeros_pares(10)
numeros_pares <- function(limite) {
for (i in 1:limite) {
if (i %% 2 == 0) {
cat(i, " ")
}
}
}
# Llamada a la función
numeros_pares(10)
numeros_pares <- function(limite) {
for (i in 1:limite) {
if (i %% 2 == 0) {
print(i, " ")
}
}
}
# Llamada a la función
numeros_pares(10)
numeros_pares <- function(limite) {
for (i in 1:limite) {
if (i %% 2 == 0) {
print(i)
}
}
}
# Llamada a la función
numeros_pares(10)
matriz_cuadrada <- function(n) {
for (i in 1:n) {
fila <- numeric(n)
for (j in 1:n) {
fila[j] <- i + j
}
print(fila)
}
}
# Llamada a la función
matriz_cuadrada(3)
# Llamada a la función
matriz_cuadrada(4)
data()
#crear un data frame
df <- data.frame(id 1:4,
#crear un data frame
df <- data.frame(id = 1:4,
nombres = c("Ana","Belen","Carlos","Daniel"),
notas = c(8.5,7,4,9.2))
df
df2 <- data.frame(1:10,5:10)
#propiedades
class(df)
dim(df)
View(df)
View(df)
length(df)
ncol(df)
nrow(df)
#funciones utiles
names(df)
head(df)
head(df, n=2)
tail(df, n=3)
summary(df)
str(df)
#Acceder a elementos
df$nombres
df[[3]]
df[1,]
df[,2]
df[3,3]
#Add
df$edad <- c(20,32,28,40)
dim(df)
#No se pueden pasar columnas de tamaños diferentes - Test
df$aprobado <- c(TRUE,TRUE,FALSE)
cbind(df,aprobado = c(TRUE,TRUE,FALSE,TRUE))
#OJO! la añade pero no la has guardado aun en el df
df <- cbind(df,aprobado = c(TRUE,TRUE,FALSE,TRUE)) #Añade a un df una columna = rbind
dim(df)
#-----------------------
#Eliminar elementos
df$aprobado <- NULL
dim(df)
names(df)
names(df)[2]<- "Nombre y apellido"
names(df)
names(df)
names(df)[2]<- "Nombre"
names(df)
#Coercion
df_numeros <- data.frame(A=1:10, B=11:20)
mat <- as.matrix(df_numeros)
mat
class(mat)
mat2 <- as.matrix(df)
mat2
df_numeros2 <- as.data.frame(mat)
df_numeros2
